#!/usr/bin/perl -w
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use FindBin qw($Bin $Script);
use File::Basename qw(basename dirname);
use Term::ANSIColor qw(:constants);
use Cwd qw(abs_path cwd);

$Term::ANSIColor::AUTORESET = 1;

$ENV{SGE_ROOT} = "/opt/gridengine/";
#$ENV{PATH}     = "/opt/gridengine/bin/lx-amd64:$ENV{PATH}";
$ENV{PATH}     = "/opt/gridengine/bin/linux-x64/:$ENV{PATH}";
### 可用 fangjian fsz
my @Versions = (
	"1.0 <2017-07-04> PBS version basing on qsub-sge.pl by FanWei",
	"1.1 <2017-07-25> Support multiple shells input",
	"1.2 <2017-08-11> Support several nodes input, \"--node cu01,cu02,cu03\"",
	"1.3 <2017-08-13> Output start and end time for every sub-shell",
	"2.0 <2017-11-06> Support SGE",
	"2.1 <2017-11-07> add environment variable for sge",
	"2.2 <2018-01-15> debug for '>>' and '2>>'",
);
my $allversions = join "\n         ", @Versions;
my $scriptname = basename $0;

sub usage {
	print STDERR GREEN <<"TITLE";

----------------------------------------------------------------------------------------
                    Processes controlling on linux PBS & SGE system.
----------------------------------------------------------------------------------------

TITLE
	print STDERR <<"USAGE";
This program throw the jobs and control them running on linux PBS & SGE system.
It reads jobs from an input shell file. One line is the smallest unit of a 
single job, however, you can also specify the number of lines to form a single
job. The program will terminate when all its jobs are perfectly finished.

You can use the --cpu option to limit the number of throwing jobs. When each
job consumes long time, you can use the --interval option to increase interval
time for qstat checking , in order to reduce the burden of the head node. Also 
for the running node, --node option was provided to assign compute node. The
default value is 'auto', which means free nodes will be fetched and used 
automatically.

Only absolute path can be recognized, so you'd better use absolute path everywhere.
We have developed sub-func to deal with path problems: by setting "--convert yes"
option, the local path will be converted to absolute path.
(1) For local path, you'd better write "./input.txt" instead of only "input.txt", 
    as "/" is the key mark to distinguish path.
(2) For those existed files and un-created files after the redirect character ">",
    the program will add a path "./" to the file automatically.
(3) Note that for the re-direct character ">" and "2>", there must be space characters
    both at before and after.

There are several mechanisms to make sure that all the jobs have been finished:
(1) We add an auto job completiton mark "This-Work-is-Completed!" to the end of 
    the job, and check it after the job finished.
(2) We provide a "--secure" option to allow the users define their own job completion
    mark. You can print a mark (for example, "my job complete") to STDERR at the end 
    of your program, and set --secure "my job complete" at this program.
(3) "--retry" option was provided to throw the unfinished jobs automatically, within
    specified times.

Multiple shell inputs was supported now. Make sure all the shell inputs can be splitted
within the same line (--lines). And the qsub order was the same with shell input order.

Normally, The result of this program contains 3 parts:
(1) work.sh.PID.globle	store the shell scripts which has been converted to global path.
(2) work.sh.PID.qsub/	store the middle works, such as job script, .o and .e result.
(3) work.sh.PID.log	store the error job list, which has been throwed more than one times.
(4) All_sh_qsub.PID.log	store the error job list, for more than one shell input.

Author: Shilin Zhu <zhushilin\@frasergen.com; silenfree\@gmail.com>
Version: $allversions
USAGE
	print STDERR YELLOW <<"USAGE";

Usage: perl $scriptname  <jobs1.sh>  <jobs2.sh>  ...  [options]

	-e, --engine <str>	PBS or SGE. [SGE]
	-l, --lines <int>	set number of lines to form a sub-shell. [1]
	-p, --cpu <int>		set the maximum number of jobs to throw out. [24]
	-t, --threads <int>	set the cpu number for every sub-job. [1]
	-f, --vf <str>		set the virtual_free resource. SGE ONLY. [2G]
	-q, --queue <str>	specify the queue to use.  [all.q]
	-n, --node <str>	set the compute node. number/name/auto. [1]
	-r, --retry <int>	re-qsub unfinished jobs for specified times. [10]
	-m, --name <str>	set the prefix tag for qsubed sub-jobs. [basename]
	-c, --convert <str>	convert local path to absolute path, yes/no. [yes]
	-s, --secure <str>	set the user defined job completition mark.
	-i, --interval <int>	set interval time of checking by qstat. [30]
	-v, --verbose		output verbose information to screen

	-u, --usage		simple usage for this progrem.
	-h, --help		show this help.
USAGE

	print STDERR <<"USAGE";

Example:

1. work with default options (the most simplest way):
perl $scriptname ./work.sh

2. work with long interval time: 
perl $scriptname --interval 300 ./work.sh

3. work with user specifed options:
perl $scriptname --queue cu --lines 10 --cpu 24 --node 1 --retry 100 --convert yes ./work.sh 

4. work with no re-qsub
perl $scriptname --retry 0 ./work.sh

5. work with large mem
perl $scriptname --vf 50G ./work.sh

6. work with multi-shells
perl $scriptname --cpu 50 --lines 2 --convert yes ./work01.sh ./work02.sh ./work03.sh

USAGE
	exit 0;
}

my ($Engine);
my ( $Lines, $Maxjob, $threads, $vf, $queue, $node, $Reqsub, $Job_prefix, $Convert, $Secure, $Interval, $Verbose );
my ( $usage, $help );
GetOptions(
	"engine|e:s"   => \$Engine,
	"lines|l:i"    => \$Lines,
	"cpu|p:i"      => \$Maxjob,
	"threads|t:i"  => \$threads,
	"vf|f:s"       => \$vf,
	"queue|q:s"    => \$queue,
	"node|n:s"     => \$node,
	"retry|r:i"    => \$Reqsub,
	"name|m:s"     => \$Job_prefix,
	"convert|c:s"  => \$Convert,
	"secure|s:s"   => \$Secure,
	"interval|i:i" => \$Interval,
	"verbose|v!"   => \$Verbose,
	"usage|u!"     => \$usage,
	"help|h!"      => \$help,
);
$Engine  ||= "SGE";
$vf      ||= "2G";
$Lines   ||= 1;
$Maxjob  ||= 24;
$threads ||= 1;
$vf      ||= $threads * 2.5 . "G";
$node    ||= 1;
$Reqsub //= 10;
$Convert  ||= "yes";
$Interval ||= 30;
my $Queue = ( !defined $queue ) ? 'all.q' : $queue;

usage() if ($help);
die "Usage: $0  <jobs.sh>  <jobs.sh>  ...
	[--engine PBS|SGE]  [--lines int|1]  [--cpu int|24]  [--threads int|1]  [--node str|1]  [--queue (all.q)]
	[--vf str]  [--retry int|10]  [--name str|basename]  [--convert (yes)|no]  [--secure str]  [--interval int|30]
	[--verbose]  [--usage]  [--help]
You can use '--help/-h' to read detailed information about this program.\n" if ( $usage || @ARGV < 1 );
die "No queue named $queue. Give the right option for --queue.\n" if ( $Queue eq 'ERROR' );

my (@work_shell_files) = @ARGV;

my $current_dir = cwd;
my @Shell;

my $Sh_mark = "00";
my %ShBase;
my $work_shell_file_error;
foreach my $work_shell_file (@work_shell_files) {
	## global variables
	$work_shell_file_error = $work_shell_file . ".$$.log";
	my $work_shell_file_globle = $work_shell_file . ".$$.globle";
	my $Work_dir               = $work_shell_file . ".$$.qsub";
	mkdir $Work_dir unless ( -d $Work_dir );
	$Work_dir = abs_path $Work_dir;
	( my $here_base = $Work_dir ) =~ s/\.qsub$//;

	if ( $Convert =~ /y/i ) {
		absolute_path( $work_shell_file, $work_shell_file_globle );
	}
	else {
		$work_shell_file_globle = $work_shell_file;
	}

	my $Job_prefixHere;
	if ( !defined $Job_prefix ) {
		$Job_prefixHere = basename $work_shell_file;
		$Job_prefixHere =~ s/\.sh(ell)?$//;
	}
	else {
		$Job_prefixHere = $Job_prefix;
	}

	## read from input file, make the qsub shell files
	my $line_mark = 0;
	my $Job_mark  = "001";
	$Sh_mark++;
	open IN, $work_shell_file_globle || die $!;
	while (<IN>) {
		chomp;
		s/&\s*$/;/g;
		s/#.*//;
		next unless ($_);
		if ( $line_mark % $Lines == 0 ) {
			close OUT if ($line_mark);
			my $shell_name = "$Job_prefixHere\_$Sh_mark$Job_mark.sh";
			open OUT, ">$Work_dir/$shell_name" || die "failed creat $shell_name";
			push @Shell, $shell_name;
			$ShBase{$shell_name} = $here_base;
			$Job_mark++;
		}
		s/;\s*$//;    ##delete the last character ";", because two ";;" characters will cause error in qsub
		s/;\s*;/;/g;
		print OUT "date; $_; date; echo This-Work-is-Completed!\n";

		$line_mark++;
	}
	close IN;
	close OUT;

	print STDERR "make the qsub sub-shell files done\n" if ($Verbose);
}
$work_shell_file_error = "All_sh_qsub.$$.log" if ( @work_shell_files > 1 );

## run jobs by qsub, until all the jobs are really finished
my $qsub_cycle = 1;
while (@Shell) {

	## throw jobs by qsub
	##we think the jobs on died nodes are unfinished jobs
	my %Alljob;    ## store all the job IDs of this cycle
	my %Runjob;    ## store the real running job IDs of this cycle
	my %Error;     ## store the unfinished jobs of this cycle
	for ( my $i = 0 ; $i < @Shell ; $i++ ) {
		while (1) {
			my $run_num = run_count( \%Alljob, \%Runjob );
			if ( $i < $Maxjob || ( $run_num != -1 && $run_num < $Maxjob ) ) {
				my $here_node = free_nodes($node);
				chdir "$ShBase{$Shell[$i]}.qsub";
				my $job_id;
				if ( $Engine =~ /SGE/i ) {
					my $resource_list = "";
					$resource_list .= " -l h=$here_node" if ( $here_node !~ /^\d+$/ );
					$resource_list .= " -l vf=$vf"       if ( defined $vf );
					$resource_list .= " -q $Queue"       if ( defined $Queue );
					$resource_list .= " -l p=$threads"   if ( defined $threads );
					chomp( $job_id = `qsub -V -S /bin/sh -cwd $resource_list $Shell[$i]` );   ## add fangj
					($job_id) = $job_id =~ /Your job (\S+)/;
				}
				else {
					chomp( $job_id = `qsub -l nodes=$here_node:ppn=$threads -q $Queue $Shell[$i]` );
				}
				chdir $current_dir;
				$Alljob{$job_id} = $Shell[$i];    ## job id => shell file name
				print STDERR "throw job $job_id [ $ShBase{$Shell[$i]}.qsub/$Shell[$i] ] in the $qsub_cycle cycle\n" if ($Verbose);
				last;
			}
			else {
				print STDERR "wait for throwing next job in the $qsub_cycle cycle\n" if ($Verbose);
				sleep $Interval;
			}
		}
	}

	###waiting for all jobs fininshed
	while (1) {
		my $run_num = run_count( \%Alljob, \%Runjob );
		last if ( $run_num == 0 );
		print STDERR "There left $run_num jobs runing in the $qsub_cycle cycle\n" if ( defined $Verbose );
		sleep $Interval;
	}

	print STDERR "All jobs finished, in the firt cycle in the $qsub_cycle cycle\n" if ($Verbose);

	##run the secure mechanism to make sure all the jobs are really completed
	open OUT, ">>$work_shell_file_error" || die "fail create $work_shell_file_error";
	foreach my $job_id ( sort keys %Alljob ) {
		my $shell_file = $Alljob{$job_id};
		my $shell_Base = $ShBase{$shell_file};
		( my $job_log = $job_id ) =~ s/\..*//;

		##read the .o file
		my $content;
		if ( -f "$shell_Base.qsub/$shell_file.o$job_log" ) {
			open IN, "$shell_Base.qsub/$shell_file.o$job_log" || warn "fail $shell_file.o$job_log";
			$content = join( "", <IN> );
			close IN;
		}
		##check whether the job has been killed during running time
		if ( $content !~ /This-Work-is-Completed!/ ) {
			$Error{$job_id} = $shell_file;
			print OUT
			  "In qsub cycle $qsub_cycle, In $shell_file.o$job_log,  \"This-Work-is-Completed!\" is not found, so this work may be unfinished\n";
		}

		##read the .e file
		undef $content;
		if ( defined $Secure && -f "$shell_Base.qsub/$shell_file.e$job_log" ) {
			open IN, "$shell_Base.qsub/$shell_file.e$job_log" || warn $!;
			my $Secure_flag = 0;
			while (<IN>) {
				if ( defined $Secure && $content =~ /$Secure/ ) {
					$Secure_flag = 1;
					last;
				}
			}
			close IN;
			unless ($Secure_flag) {
				$Error{$job_id} = $shell_file;
				print OUT "In qsub cycle $qsub_cycle, In $shell_file.o$job_log,  \"$Secure\" is not found, so this work may be unfinished\n";
			}
		}
		##check whether the C/C++ libary is in good state
		#if ($content =~ /GLIBCXX_3.4.9/ && $content =~ /not found/) {
		#	$Error{$job_id} = $shell_file;
		#	print OUT "In qsub cycle $qsub_cycle, In $shell_file.e$job_id,  GLIBCXX_3.4.9 not found, so this work may be unfinished\n";
		#}

		##check whether iprscan is in good state
		#if ($content =~ /iprscan: failed/) {
		#	$Error{$job_id} = $shell_file;
		#	print OUT "In qsub cycle $qsub_cycle, In $shell_file.e$job_id, iprscan: failed , so this work may be unfinished\n";
		#}
	}

	##make @shell for next cycle, which contains unfinished tasks
	@Shell = ();
	foreach my $job_id ( sort keys %Error ) {
		my $shell_file = $Error{$job_id};
		push @Shell, $shell_file;
	}

	if ( @Shell == 0 ) {
		print OUT "All jobs finished!\n";

	}
	elsif ( $qsub_cycle < $Reqsub + 1 ) {
		print STDERR "The secure mechanism is performed in the $qsub_cycle cycle ...\n" if ($Verbose);
	}
	else {
		print OUT "\n\nProgram stopped because the reqsub cycle number has reached $Reqsub, the following jobs unfinished:\n";
		print OUT join( "\n", @Shell ) . "\n";
		print OUT "Please check carefully for what errors happen, and redo the work, good luck!";
		close OUT;
		die "\nProgram stopped because the reqsub cycle number has reached $Reqsub\n";
	}

	close OUT;

	$qsub_cycle++;
}

print STDERR "\nqsub-sge.pl finished\n" if ($Verbose);

#==================================================================================================================
#============================================== Sub Routines ======================================================
#==================================================================================================================

sub absolute_path {
	my ( $in_file, $out_file ) = @_;

	#my $current_path=cwd;
	my $shell_abs           = abs_path $in_file;
	my $shell_absolute_path = dirname $shell_abs;

	#change all the local path of programs in the input shell file;
	open IN,  "$in_file"   || die $!;
	open OUT, ">$out_file" || die $!;
	while (<IN>) {
		chomp;
		s/>([^\s>])/> $1/g;
		s/2>([^\s>])/2> $1/g;
		s/#.*//;
		my @words = split /\s+/, $_;

		##improve the command, add "./" automatically
		for ( my $i = 1 ; $i < @words ; $i++ ) {
			if ( $words[$i] !~ /\// ) {
				if ( -f $words[$i] ) {
					$words[$i] = "./$words[$i]";
				}
				elsif ( $words[ $i - 1 ]=~/^(>|>>|2>|2>>)$/) {
					$words[$i] = "./$words[$i]";
				}
			}

		}
		for ( my $i = 0 ; $i < @words ; $i++ ) {
			if ( $words[$i] !~ /\$/ && $words[$i] !~ /\=/ && $words[$i] !~ /^\-|^\/|^!|^~/ && $words[$i] =~ /\// ) {
				$words[$i] = "$shell_absolute_path/" . "$words[$i]";
			}
		}
		print OUT join( " ", @words ), "\n";
	}
	close IN;
	close OUT;
}

#========================================================
##get the IDs and count the number of running jobs
##the All job list and user id are used to make sure that the job id belongs to this program
##add a function to detect jobs on the died computing nodes.
sub run_count {
	my ( $all_p, $run_p ) = @_;

	my $subr = ( $Engine =~ /SGE/i ) ? \&run_count_SGE : \&run_count_PBS;
	return &$subr( $all_p, $run_p );
}

sub run_count_SGE {
	my $all_p   = shift;
	my $run_p   = shift;
	my $run_num = 0;

	%$run_p = ();
	my $user = `whoami`;
	chomp $user;
	my $qstat_result = `qstat -u $user`;
	if ( $qstat_result =~ /failed receiving gdi request/ ) {
		$run_num = -1;
		return $run_num;    ##ÏµÍ³ÎÞ·´Ó¦
	}
	my @jobs = split /\n/, $qstat_result;
	foreach my $job_line (@jobs) {
		$job_line =~ s/^\s+//;
		next if ( $job_line =~ /^(---|job-ID)/ );
		my @job_field = split /\s+/, $job_line;
		next if ( $job_field[3] ne $user );
		if ( exists $all_p->{ $job_field[0] } ) {

			my %died;
			died_nodes( \%died );    ##the compute node is down
			my $node_name = ( $job_field[7] =~ /\S+@(\S+)/ ) ? $1 : "";
			if ( !exists $died{$node_name} && ( $job_field[4] eq "qw" || $job_field[4] eq "r" || $job_field[4] eq "t" ) ) {
				$run_p->{ $job_field[0] } = $job_field[2];    ##job id => shell file name
				$run_num++;
			}
			else {
				`qdel $job_field[0]`;
			}
		}
	}

	return $run_num;
}

sub died_nodes {
	my $died_p = shift;

	my @lines = split /\n/, `qhost`;
	shift @lines;
	shift @lines;
	shift @lines;    ##remove the first three title lines

	foreach (@lines) {
		my @t          = split /\s+/;
		my $node_name  = $t[0];
		my $memory_use = $t[5];
		$died_p->{$node_name} = 1 if ( $t[3] =~ /-/ || $t[4] =~ /-/ || $t[5] =~ /-/ || $t[6] =~ /-/ || $t[7] =~ /-/ );
	}

}

sub run_count_PBS {
	my $all_p   = shift;
	my $run_p   = shift;
	my $run_num = 0;

	%$run_p = ();
	my $user = `whoami`;
	chomp $user;
	my $qstat_result = `qstat`;
	if ( $qstat_result =~ /failed receiving gdi request/ ) {
		$run_num = -1;
		return $run_num;
	}
	my @jobs = split /\n/, $qstat_result;
	foreach my $job_line (@jobs) {
		$job_line =~ s/^\s+//;
		my @job_field = split /\s+/, $job_line;
		next if ( $job_field[2] ne $user );
		if ( exists $all_p->{ $job_field[0] } ) {
			$run_p->{ $job_field[0] } = $job_field[2];    ##job id => shell file name
			$run_num++;
		}
	}

	return $run_num;
}

#========================================================
sub free_nodes {
	my ($nodeflag) = @_;
	my $subr = ( $Engine =~ /SGE/i ) ? \&free_nodes_SGE : \&free_nodes_PBS;
	return &$subr($nodeflag);
}

sub free_nodes_SGE {
	my ($nodeflag) = @_;

	return $nodeflag if ( $nodeflag =~ /^\d+$/ );

	$nodeflag =~ s/,.*//;
	if ( $nodeflag ne 'auto' ) {
		return $nodeflag;
	}

	my %allND;
	foreach my $line ( split /\n/, `qstat -f` ) {
		next if ( $line =~ /^(queuename|--|\s|fat)/ );
		my @ifte = split /\s+/, $line;
		$ifte[0] =~ s/.+@//;
		if ( $ifte[3] =~ /^[\.\d]+$/ ) {
			my ( $use, $all ) = $ifte[2] =~ /\/(\d+)\/(\d+)/;
			$allND{ $ifte[0] } = $all - $use;
		}
	}
	return ( sort { $allND{$b} <=> $allND{$a} } keys %allND )[0];
}

sub free_nodes_PBS {
	my ($nodeflag) = @_;

	## node number
	return $nodeflag if ( $nodeflag =~ /^\d+$/ );

	## node name
	my %allND;
	foreach my $NDinfor ( split /\n\n/, `qnodes` ) {
		my ($NDname) = $NDinfor =~ /^(\S+)/;
		my ($np)     = $NDinfor =~ /\s+np = (\d+)/;
		my $jobs     = 0;
		if ( $NDinfor =~ /\s+jobs = ([^\n]+)/ ) {
			my @jobs = split /,/, $1;
			$jobs = scalar @jobs;
		}
		$allND{$NDname} = $np - $jobs;
	}

	# ignore fat01
	if ( $Maxjob < 24 || $Queue eq 'cu' ) {
		$allND{fat01} = 0;
	}

	# node select
	if ( $nodeflag eq 'auto' ) {
		return ( sort { $allND{$b} <=> $allND{$a} } keys %allND )[0];
	}
	else {
		if ( exists $allND{$nodeflag} ) {
			return $nodeflag;
		}
		else {
			my $nodeK;
			my $nodeF = 0;
			foreach my $evnode ( split /,/, $nodeflag ) {
				if ( exists $allND{$evnode} && $allND{$evnode} >= $nodeF ) {
					$nodeK = $evnode;
					$nodeF = $allND{$evnode};
				}
			}
			if ( defined $nodeK ) {
				return $nodeK;
			}
			else {
				die "No node named/in $nodeflag.\nExit!\n";
			}
		}
	}
}

#======================================================== Step and Cherish ===========================================================
